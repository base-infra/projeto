"""
Django settings for it_solutions_eng project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import boto3
import json
import os
from botocore.exceptions import ClientError


# Configuração para cookies de sessão
SESSION_COOKIE_SECURE = False  # Deve ser True em produção com HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Configurações de sessão
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Usa banco de dados para armazenar sessões
SESSION_COOKIE_AGE = 3600  # Tempo em segundos (3600 = 1 hora) 
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # False para manter a sessão mesmo após fechar o navegador
SESSION_SAVE_EVERY_REQUEST = True  # Atualiza a sessão a cada requisição

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend'
] 

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'  # Página após login bem-sucedido
LOGOUT_REDIRECT_URL = '/login/'  # Página após logout


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['3.143.214.203','127.0.0.1', 'localhost', '3.145.200.145']

#teste


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'sslserver',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

# Configure as URLs que podem ser acessadas sem autenticação
LOGIN_EXEMPT_URLS = [
    'login',  # Nome da URL para login
    'logout',  # Nome da URL para logout
]


ROOT_URLCONF = 'it_solutions_eng.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Garante que Django encontre os templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'it_solutions_eng.wsgi.application'


def get_secret(secret_name):
    region_name = "us-east-2"  # Ajusta se usares outra região

    session = boto3.session.Session()
    client = session.client(service_name='secretsmanager', region_name=region_name)

    try:
        get_secret_value_response = client.get_secret_value(SecretId=secret_name)
        secret = get_secret_value_response['SecretString']
        return json.loads(secret)
    except ClientError as e:
        raise Exception(f"Erro ao obter segredo: {e}")
    
SECRET_NAME = "secret-db-sistema-engenharia"
secrets = get_secret(SECRET_NAME)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': secrets['dbInstanceIdentifier'],
        'USER': secrets['username'],
        'PASSWORD': secrets['password'],
        'HOST': secrets['host'],
        'PORT': secrets['port'],
    }
}

SECRET_KEY = get_secret("secret-django-key")['SECRET_KEY']



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
 
TIME_ZONE = 'America/Sao_Paulo'  # Fuso horário de Brasília
USE_TZ = True  # Garantir que o Django use fuso horário

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.CustomUser'

 
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'accounts', 'static'),
]

# Configuração de diretório de uploads
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')